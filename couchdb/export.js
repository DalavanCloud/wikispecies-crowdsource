{"_id":"_design/export","_rev":"27-48667bba5cbe270602e0892fd58ed3db","lists":{"jsonl":"function(head,req) { var row; start({ 'headers': { 'Content-Type': 'text/plain' } }); while(row = getRow()) { send(JSON.stringify(row.value) + '\\n'); } }"},"views":{"elastic":{"map":"//----------------------------------------------------------------------------------------\n// START COUCHDB VIEW\n//----------------------------------------------------------------------------------------\n\n\n//----------------------------------------------------------------------------------------\nfunction add_values(elastic_search_doc, key, value, boost) {\n\telastic_search_doc.search_data.fulltext_values.push(value);\n\t\n\tboosted = (typeof boost !== 'undefined') ?  boost : false;\n\t\n\tif (boosted) {\n\t\telastic_search_doc.search_data.fulltext_boosted_values.push(value);\n\t}\n\t\n\tswitch (key) {\n\t\tcase 'container':\n\t\tcase 'author':\n\t\t\telastic_search_doc.search_data[key].push(value);\n\t\t\tbreak;\n\n\t\tcase 'year':\n\t\t\telastic_search_doc.search_data[key] = value;\n\t\t\tbreak;\n\t\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\t\n\treturn elastic_search_doc;\n}\n\n//----------------------------------------------------------------------------------------\nfunction cls_to_elastic(id, work) {\n\n    var elastic_search_doc = {};\n    \n    elastic_search_doc.id = id;\n    \n    /*\n    // type of document\n    switch (work.type) {\n       case 'article-journal':\n         elastic_search_doc.type = 'article';\n         break;\n         \n       default:\n         elastic_search_doc.type = work.type;\n         break;    \n    }\n    */\n    \n    \n\t// output to display in list of hits\n\telastic_search_doc.search_result_data = {};\n\t\n\t// possible fields to hold information on how to display this object\n\telastic_search_doc.search_result_data.name = '';\n\telastic_search_doc.search_result_data.description = '';\n\telastic_search_doc.search_result_data.creator = [];\n\telastic_search_doc.search_result_data.thumbnailUrl = '';\n\telastic_search_doc.search_result_data.url = '';\n\t\n\telastic_search_doc.search_result_data.WIKISPECIES = [];\n\t\n\t// temporary\n\telastic_search_doc.search_result_data.description_parts = [];\n\t\n\telastic_search_doc.search_result_data.url = 'https://species.wikimedia.org/wiki/' + elastic_search_doc.id;\n\n\t// fields that will be searched on\n\telastic_search_doc.search_data = {};\n\t\n\t// text fields for searching on\n\telastic_search_doc.search_data.fulltext_values = [];\n\telastic_search_doc.search_data.fulltext_boosted_values = [];\n\t\n\t// things to use as facets\n\telastic_search_doc.search_data.container = [];\n\telastic_search_doc.search_data.author = [];\n\telastic_search_doc.search_data.year = null;\n\t\n\t\n\t// support clustering\n\t// default cluster is this work's id\n\telastic_search_doc.search_data.cluster_id = id;\n    \n    // if work has a cluster_id is set use that\n\tif (work.cluster_id) {\n\t  elastic_search_doc.search_data.cluster_id = work.cluster_id;\n\t}    \n\t\n    // type of document\n    switch (work.type) {\n       case 'article-journal':\n         elastic_search_doc.search_result_data.type = 'article';\n         elastic_search_doc.search_data.type = 'article';\n         break;\n         \n       default:\n         elastic_search_doc.search_result_data.type = work.type;\n         elastic_search_doc.search_data.type = work.type;\n         break;    \n    }\t\n\n\t// title\n\t// multiple lnanguages?\n    if (work.multi && work.multi._key.title) {\n      \tvar title = [];\n    \tfor (var language in work.multi._key.title) {\n    \t\ttitle.push(work.multi._key.title[language]);\n\t\t\telastic_search_doc = add_values(elastic_search_doc, 'title', work.multi._key.title[language], true);      \t\t\n    \t}\n    \telastic_search_doc.search_result_data.name = title.join(' / ');\n    } else {\n\t\tif (work.title) {\n\t\t\tif (Array.isArray(work.title)) {\n\t\t\t\telastic_search_doc = add_values(elastic_search_doc, 'title', work.title[0], true);  \n\t\t\t\n\t\t\t\telastic_search_doc.search_result_data.name = work.title[0];\n\t\t\t} else {\n\t\t\t\telastic_search_doc = add_values(elastic_search_doc, 'title', work.title, true);\n\n\t\t\t\telastic_search_doc.search_result_data.name = work.title;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// container\n    if (work.multi && work.multi._key['container-title']) {\n      \tvar container = [];\n      \t\n    \tfor (var language in work.multi._key['container-title']) {\n    \t\tcontainer.push(work.multi._key['container-title'][language]);\n    \t\telastic_search_doc = add_values(elastic_search_doc, 'container', work.multi._key['container-title'][language], true);  \n    \t}\n\t\telastic_search_doc.search_result_data.description_parts.push('in ' + container.join(' / '));\n      \t\n\t} else {\n\t\t\n\t\tif (work['container-title']) {\n\t\t\tvar container = '';\n\t\t\tif (Array.isArray(work['container-title'])) {\n\t\t\t\tcontainer = work['container-title'][0];          \n\t\t\t} else {\n\t\t\t\tcontainer = work['container-title']; \t\t\n\t\t\t}\n\t\t\telastic_search_doc = add_values(elastic_search_doc, 'container', container, true);\n\t\t\telastic_search_doc.search_result_data.description_parts.push('in ' + container);\t\n\t\t}\n\t}\n\t\n\t// abstract\n    if (work.multi && work.multi._key.abstract) {\n    \tfor (var language in work.multi._key['container-title']) {\n    \t\telastic_search_doc = add_values(elastic_search_doc, 'abstract', work.multi._key.abstract[language], false);  \n    \t}\n\t} else {\t\t\n\t\tif (work.abstract) {\n\t\t\telastic_search_doc = add_values(elastic_search_doc, 'abstract', work.abstract, false);\n\t\t}\n\t}\n\t\n\t\n\t// author\n\tif (work.author) {\n\t\tfor (var i in work.author) {\n\t\t\t// do we have multiple languages?\n    \t\tif (work.author[i].multi) {\n    \t\t  var author = [];\n    \t\t  for (var language in work.author[i].multi._key.literal) {\n    \t\t\telastic_search_doc = add_values(\n    \t\t\t\telastic_search_doc, \n    \t\t\t\t'author', work.author[i].multi._key.literal[language], true); \n    \t\t\t\tauthor.push(work.author[i].multi._key.literal[language]);\n    \t\t\t\n    \t\t}\n    \t\telastic_search_doc.search_result_data.creator.push(author.join(' / '));\n    \t} else {\n    \t\t// simple case\n    \t\tvar name = [];\n    \t\t\n    \t\tif (work.author[i].given) {\n    \t\t\tname.push(work.author[i].given);\n    \t\t}\n     \t\tif (work.author[i].family) {\n    \t\t\tname.push(work.author[i].family);\n    \t\t}\n    \t\t\n\t\t\t// just use literal if we have it\n     \t\tif (work.author[i].literal) {\n    \t\t\tname = [work.author[i].literal];\n    \t\t}\n    \t\t\n    \t\tif (name.length > 0) {\n    \t\t\tadd_values(elastic_search_doc, 'author', name.join(' '), true); \n    \t\t\telastic_search_doc.search_result_data.creator.push(name.join(' '));\n    \t\t}\n    \t\t\n    \t\t\n     \t\tif (work.author[i].WIKISPECIES) {\n    \t\t\telastic_search_doc.search_result_data.WIKISPECIES.push(work.author[i].WIKISPECIES);\n    \t\t}\n    \t\t\n    \t\t\n\n\t\t}\n\t\t}\n\t\n\t}\n\t\t\n\t//------------------------------------------------------------------------------------\n\n\t// date\n\tif (work.issued) {\n\t\tif (work.issued['date-parts']) {\n\t\t\tvar year = work.issued['date-parts'][0][0];\n\n\t\t\telastic_search_doc = add_values(elastic_search_doc, 'year', year);\n\t\t\t\n\t\t\telastic_search_doc.search_result_data.description_parts.push('in ' + year);\t\t\n\t\t}\n\t} \n\n\t// volume\n\tif (work.volume) {\n\t\telastic_search_doc = add_values(elastic_search_doc, 'volume', work.volume);\t\t\n\t\telastic_search_doc.search_result_data.description_parts.push('in volume ' + work.volume);\t\t\n\t} \n\n\t// issue\n\tif (work.issue) {\n\t\telastic_search_doc = add_values(elastic_search_doc, 'issue', work.issue);\t\t\n\t\telastic_search_doc.search_result_data.description_parts.push('issue ' + work.issue);\t\t\n\t} \n\n\t// page\n\tif (work.page) {\n\t\telastic_search_doc = add_values(elastic_search_doc, 'page', work.page);\n\t\tvar prefix = 'page';\n\t\tif (work.page.match(/-/)) {\n\t\t\tprefix = 'pages';\n\t\t}\n\t\telastic_search_doc.search_result_data.description_parts.push(prefix + ' ' + work.page);\t\t\n\t} \n\n\t// DOI\n\tif (work.DOI) {\n\t\telastic_search_doc = add_values(elastic_search_doc, 'doi', work.DOI);\t\t\n\t\t\n\t\telastic_search_doc.search_result_data.doi = work.DOI;\n\t} \n\t\n\t\n\t// ISSN\n\t if (work.ISSN) {\n\t    elastic_search_doc.search_result_data.issn = [];\n\t\tfor (var j in work.ISSN) {\n\t      elastic_search_doc.search_result_data.issn.push(work.ISSN[j]);\n\t\t}\n\t }\n\t \n\t\n\t// PDF\n\t if (work.link) {\n\t\tfor (var j in work.link) {\n\t\t  if (work.link[j]['content-type'] == 'application/pdf') {\n\t\t    elastic_search_doc.search_result_data.pdf = work.link[j].URL;\n\t\t  }\n\t\t}\n\t }\n\t\n\n\t//------------------------------------------------------------------------------------\n\t\n\t// cleanup\n\telastic_search_doc.search_data.fulltext = elastic_search_doc.search_data.fulltext_values.join(' ');\n\tdelete elastic_search_doc.search_data.fulltext_values;\n\n\telastic_search_doc.search_data.fulltext_boosted = elastic_search_doc.search_data.fulltext_boosted_values.join(' ');\n\tdelete elastic_search_doc.search_data.fulltext_boosted_values;\n\t\n\telastic_search_doc.search_result_data.description = 'Published ' + elastic_search_doc.search_result_data.description_parts.join(', ');\n\tdelete elastic_search_doc.search_result_data.description_parts;\n\t\n\tif (!elastic_search_doc.search_result_data.creator) {\n\t\tdelete elastic_search_doc.search_result_data.creator;\n\t}\n\t\n\tif (!elastic_search_doc.search_result_data.thumbnailUrl) {\n\t\tdelete elastic_search_doc.search_result_data.thumbnailUrl;\n\t}\n\n\tif (!elastic_search_doc.search_result_data.url) {\n\t\tdelete elastic_search_doc.search_result_data.url;\n\t}\n\t\n\t\n\tif (elastic_search_doc.search_result_data.WIKISPECIES.length == 0) {\n\t\tdelete elastic_search_doc.search_result_data.WIKISPECIES;\n\t}\n\t\n\t\n\t\n\t//$('#jsonld').html(JSON.stringify(elastic_search_doc, null, 2));\n\temit(elastic_search_doc.id, elastic_search_doc)\n    \n\n  \n}\n\n\nfunction (doc) {\n  if (doc.references) {\n    for (var i in doc.references) {\n       if (doc.references[i].csl) {\n         if (doc.references[i].csl.status == 'ok') {\n                 \n\t\t    var id = doc._id;\n\t\t    if (!id.match(/^Template/)) {\n              id = doc._id + '#' + (parseInt(i) + 1);\n\t\t    }\n\t\t    \n            cls_to_elastic(id, doc.references[i].csl);\n         }\n      }\n    }\n  }\n\n}\n// END COUCHDB VIEW\n\n"},"ris":{"map":"function csl_to_ris(csl, id) {\n\tvar ris = [];\n\n    var genre = '';\n    \n    switch (csl.type) {\n      case \"article-journal\":\n      \tgenre = 'JOUR';\n      \tbreak;\n      case \"chapter\":\n      \tgenre = 'CHAP';\n      \tbreak;\n      case \"book\":\n      \tgenre = 'BOOK';\n      \tbreak;\n      default:\n        genre = 'GEN';\n        break;\n    }\n       \n\tris.push('TY  - ' + genre);\n\t\n\tris.push('ID  - ' + id);\n\n\tfor (var i in csl) {\n\t  switch (i) {\n\n\t   case 'title':\n\t\t   var title = '';\n           if (Array.isArray(csl[i])) {\n\t\t     title = csl[i][0];\n\t         } else {\n\t\t\t title = csl[i];\n\t\t   }\t\t\n   \t\t   ris.push('TI  - ' + title);\n\t\t  break;\n\n\t   case 'author':\n\t\t   for (var j in csl[i]) {\n  \t\t   if (csl[i][j].family && csl[i][j].given) {\n\t\t\t      ris.push('AU  - ' + csl[i][j].family + ', ' + csl[i][j].given);\n\t\t     } else {\n\t\t       ris.push('AU  - ' + csl[i][j].literal);\n\t\t     }\n\t\t   }\n\t\t break;\n\t\t \n\t\tcase 'container-title':\n\t\t   var container = '';\n           if (Array.isArray(csl[i])) {\n\t\t     container = csl[i][0];\n\t         } else {\n\t\t\t container = csl[i];\n\t\t   }\t\t\n\t\t   // need to handle this differently for different types\n   \t\t   ris.push('JO  - ' + container);\n\t\t  break;\n\n\t   case 'volume':\n\t\t ris.push('VL  - ' + csl[i]);\n\t\t break;\n\n\t   case 'issue':\n\t\t ris.push('IS  - ' + csl[i]);\n\t\t break;\n\t \n\t\tcase 'page':\n\t\t  var m = csl[i].match(/(\\d+)-(\\d+)/);\n\t\t  if (m) {\n\t\t\tris.push('SP  - ' + parseInt(m[1]));\n\t\t\tris.push('EP  - ' + parseInt(m[2]));\n\t\t   } else {\n\t\t\t ris.push('SP  - ' + parseInt(csl[i]));\n\t\t   } \n\t\t   break;\n\t \t  \n\t\tcase 'issued':\n\t\t  ris.push('Y1  - ' + csl[i]['date-parts'][0][0]);\n\t\t  break;\n\t  \n\t   case 'DOI':\n\t\t ris.push('DO  - ' + csl[i]);\n\t\t break;\n\t\t \n\t   case 'URL':\n           if (Array.isArray(csl[i])) {\n\t\t     for (var j in csl[i]) {\n\t\t       ris.push('UR  - ' + csl[i][j]);\n\t\t     }\n\t       } else {\n\t\t\t ris.push('UR  - ' + csl[i]);\n\t\t   }\n\t\t   break;\t\t \n\t  \t \n\t\t  default:\n\t\t    break;\n\t    }\n    }\n    ris.push('ER  - ');\n    \n    return ris.join(\"\\n\");\n}\n\n\n\nfunction(doc) {\n  if (doc.references) {\n    for (var i in doc.references) {\n       if (doc.references[i].csl) {\n         if (doc.references[i].csl.status == 'ok') {\n         \n         \tvar id = doc._id;\n         \tif (!id.match(/^Template/)) {\n         \t\tid = doc._id + '#' + (parseInt(i) + 1);\n         \t}\n         \t\n         \tvar container = null;\n\t\t\tif (doc.references[i].csl['container-title']) {\n\t\t   \t\t\n           \t\tif (Array.isArray(doc.references[i].csl['container-title'])) {\n\t\t     \t\tcontainer = doc.references[i].csl['container-title'][0];\n\t         \t\t} else {\n\t\t\t \t\tcontainer = doc.references[i].csl['container-title'];\n\t\t   \t\t}\t\n\t\t   \t\t\tcontainer = container.replace(/^\\s+/, '');\n\t\t   \t}        \t\n        \n            var ris = csl_to_ris(doc.references[i].csl, id);\n            emit(id, ris);\n        }\n      }\n    }\n  }\n}"},"csl":{"map":"function(doc) {\n  if (doc.references) {\n    for (var i in doc.references) {\n       if (doc.references[i].csl) {\n         if (doc.references[i].csl.status == 'ok') {\n         \n         \tvar id = doc._id;\n         \tif (!id.match(/^Template/)) {\n         \t\tid = doc._id + '#' + (parseInt(i) + 1);\n         \t}\n\n            emit(id, doc.references[i].csl);\n        }\n      }\n    }\n  }\n}"}},"language":"javascript"}
